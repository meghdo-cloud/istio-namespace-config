{{- define "patterns.egress.https-api-resilient" -}}
{{- $pattern := .pattern }}
{{- $root := .root }}
{{- $useEgressGateway := $pattern.useEgressGateway | default $root.Values.global.egressDefaults.useEgressGateway }}
---
# ServiceEntry for {{ $pattern.name }}
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ $pattern.name }}-se
  namespace: {{ $root.Values.namespace.name | default $root.Release.Namespace }}
  labels:
    pattern: "https-api-resilient"
    pattern-name: {{ $pattern.name }}
spec:
  hosts:
    - {{ $pattern.host | quote }}
  location: MESH_EXTERNAL
  resolution: DNS
  ports:
    - number: 443
      name: https
      protocol: HTTPS
---
{{- if $useEgressGateway }}
# Egress Gateway for {{ $pattern.name }}
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: {{ $pattern.name }}-egress
  namespace: {{ $root.Values.namespace.name | default $root.Release.Namespace }}
  labels:
    pattern: "https-api-resilient"
    pattern-name: {{ $pattern.name }}
spec:
  selector:
    istio: egressgateway
  servers:
    - port:
        number: 443
        name: tls
        protocol: TLS
      hosts:
        - {{ $pattern.host | quote }}
      tls:
        mode: ISTIO_MUTUAL
---
{{- end }}
# VirtualService for {{ $pattern.name }} with resilience
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ $pattern.name }}-vs
  namespace: {{ $root.Values.namespace.name | default $root.Release.Namespace }}
  labels:
    pattern: "https-api-resilient"
    pattern-name: {{ $pattern.name }}
spec:
  hosts:
    - {{ $pattern.host | quote }}
  {{- if $useEgressGateway }}
  gateways:
    - {{ $pattern.name }}-egress
    - mesh
  {{- end }}
  http:
    {{- if $useEgressGateway }}
    - match:
        - gateways:
            - mesh
          port: 443
      route:
        - destination:
            host: istio-egressgateway.{{ $root.Values.global.istioNamespace }}.svc.cluster.local
            port:
              number: 443
      timeout: {{ dig "resilience" "timeout" "30s" $pattern }}
      retries:
        attempts: {{ dig "resilience" "retries" 3 $pattern }}
        perTryTimeout: {{ div (trimSuffix "s" (dig "resilience" "timeout" "30s" $pattern) | int) (dig "resilience" "retries" 3 $pattern | int) }}s
        retryOn: "5xx,reset,connect-failure,refused-stream"
    - match:
        - gateways:
            - {{ $pattern.name }}-egress
          port: 443
      route:
        - destination:
            host: {{ $pattern.host | quote }}
            port:
              number: 443
    {{- else }}
    - route:
        - destination:
            host: {{ $pattern.host | quote }}
            port:
              number: 443
      timeout: {{ dig "resilience" "timeout" "30s" $pattern }}
      retries:
        attempts: {{ dig "resilience" "retries" 3 $pattern }}
        perTryTimeout: {{ div (trimSuffix "s" (dig "resilience" "timeout" "30s" $pattern) | int) (dig "resilience" "retries" 3 $pattern | int) }}s
        retryOn: "5xx,reset,connect-failure,refused-stream"
    {{- end }}
---
# DestinationRule for {{ $pattern.name }} with circuit breaker
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ $pattern.name }}-dr
  namespace: {{ $root.Values.namespace.name | default $root.Release.Namespace }}
  labels:
    pattern: "https-api-resilient"
    pattern-name: {{ $pattern.name }}
spec:
  host: {{ $pattern.host | quote }}
  trafficPolicy:
    tls:
      mode: SIMPLE
      sni: {{ $pattern.host | quote }}
    connectionPool:
      tcp:
        maxConnections: {{ dig "resilience" "circuitBreaker" "maxConnections" 100 $pattern }}
        connectTimeout: {{ dig "resilience" "connectTimeout" "10s" $pattern }}
      http:
        http1MaxPendingRequests: {{ dig "resilience" "circuitBreaker" "maxPendingRequests" 50 $pattern }}
        http2MaxRequests: {{ dig "resilience" "circuitBreaker" "maxRequests" 100 $pattern }}
        maxRequestsPerConnection: {{ dig "resilience" "circuitBreaker" "maxRequestsPerConnection" 2 $pattern }}
    outlierDetection:
      consecutive5xxErrors: {{ dig "resilience" "circuitBreaker" "consecutive5xxErrors" 5 $pattern }}
      interval: {{ dig "resilience" "circuitBreaker" "interval" "30s" $pattern }}
      baseEjectionTime: {{ dig "resilience" "circuitBreaker" "baseEjectionTime" "30s" $pattern }}
      maxEjectionPercent: {{ dig "resilience" "circuitBreaker" "maxEjectionPercent" 50 $pattern }}
{{- end -}}